Vou colocando umas descrições das funcoes aqui, depois decido o que vai para a documentação. 
Tambem vao ser notas importantes pra entender os codigos

📌 Função: generateRandomA
Proposito: gerar o valor de A[i, j] para uma matriz k-diagonal
Resultado: a diagonal fica, em média, ~2k vezes maior do que os fora-diagonal. Isso induz uma espécie de “quase dominância diagonal”, ajudando estabilidade.
Observação: os elementos são gerados independentemente; logo, a matriz não é simétrica aqui.

📌 Função: generateRandomB
Propósito: gerar o termo independente b[i]

📌 Função: criaKDiagonal
Como a matriz k-diagonal está representada

* Armazenamento: denso linearizado em linha-major (row-major). O elemento (i, j) fica em (*A)[i*n + j].
* Inicialização com calloc: toda a matriz começa zerada. Isso é essencial: os elementos fora da banda ficam 0 automaticamente.
* Faixa ativa (banda):
    - offset = k/2 (como k é ímpar, isso dá o número de sub/super-diagonais).
    - Para cada linha i, só preenche j em [i-offset, i+offset] dentro dos limites [0, n-1].
    - Na prática, por linha, você preenche ≈ k elementos; os demais ficam zero.
* Complexidade: O(n·k) atribuições, embora a matriz ocupe memória O(n²). É simples de implementar; não é a representação mais econômica, mas funciona.

📌 Função: genSimetricaPositiva
Objetivo:
Transformar o sistema linear Ax = b (com matriz k-diagonal gerada aleatoriamente) em um sistema simétrico definido positivo, que é necessário para o método dos Gradientes Conjugados funcionar corretamente.
é possível converter A em matriz SPD da forma: Ax = b ⟶ AᵗAx = Aᵗb
A é simetrico se Aᵗ = A, é positiva se xᵗAx > 0

void genSimetricaPositiva(real_t *A, real_t *b, int n, int k, 
                          real_t **ASP, real_t *bsp, rtime_t *tempo)
📥 Parâmetros de entrada:

A: matriz k-diagonal gerada originalmente (vetor linearizado).

b: vetor de termos independentes gerado por generateRandomB().

n: tamanho da matriz.

k: número de diagonais.

📤 Parâmetros de saída:

ASP: matriz simétrica definida positiva 

bsp: vetor transformado (Aᵗ·b).

tempo: tempo gasto na geração, usando timestamp().

📌 Função do pcgc
